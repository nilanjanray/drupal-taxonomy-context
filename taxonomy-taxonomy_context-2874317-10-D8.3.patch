diff --git a/core/modules/taxonomy/src/ContextProvider/TaxonomyRouteContext.php b/core/modules/taxonomy/src/ContextProvider/TaxonomyRouteContext.php
new file mode 100755
index 0000000..63da273
--- /dev/null
+++ b/core/modules/taxonomy/src/ContextProvider/TaxonomyRouteContext.php
@@ -0,0 +1,67 @@
+<?php
+
+namespace Drupal\taxonomy\ContextProvider;
+
+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Plugin\Context\Context;
+use Drupal\Core\Plugin\Context\ContextDefinition;
+use Drupal\Core\Plugin\Context\ContextProviderInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\taxonomy\Entity\Term;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+
+/**
+ * Sets the current term as a context on taxonomy routes.
+ */
+class TaxonomyRouteContext implements ContextProviderInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The route match object.
+   *
+   * @var \Drupal\Core\Routing\RouteMatchInterface
+   */
+  protected $routeMatch;
+
+  /**
+   * Constructs a new NodeRouteContext.
+   *
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   The route match object.
+   */
+  public function __construct(RouteMatchInterface $route_match) {
+    $this->routeMatch = $route_match;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getRuntimeContexts(array $unqualified_context_ids) {
+
+    $result = [];
+    $context_definition = new ContextDefinition('entity:taxonomy_term', NULL, FALSE);
+    $value = NULL;
+    if (($route_object = $this->routeMatch->getRouteObject()) && ($route_contexts = $route_object->getOption('parameters')) && isset($route_contexts['taxonomy_term'])) {
+      if ($term = $this->routeMatch->getParameter('taxonomy_term')) {
+        $value = $term;
+      }
+      $cacheability = new CacheableMetadata();
+      $cacheability->setCacheContexts(['route']);
+
+      $context = new Context($context_definition, $value);
+      $context->addCacheableDependency($cacheability);
+      $result['taxonomy_term'] = $context;
+      return $result;
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getAvailableContexts() {
+    $context = new Context(new ContextDefinition('entity:taxonomy_term', $this->t('Taxonomy from URL')));
+    return ['taxonomy_term' => $context];
+  }
+
+}
diff --git a/core/modules/taxonomy/src/Plugin/Condition/TaxonomyCondition.php b/core/modules/taxonomy/src/Plugin/Condition/TaxonomyCondition.php
new file mode 100644
index 0000000..2961022
--- /dev/null
+++ b/core/modules/taxonomy/src/Plugin/Condition/TaxonomyCondition.php
@@ -0,0 +1,109 @@
+<?php
+
+namespace Drupal\taxonomy\Plugin\Condition;
+
+use Drupal\Core\Condition\ConditionPluginBase;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides a 'Taxonomy' condition.
+ *
+ * @Condition(
+ *   id = "taxonomy_term_type",
+ *   label = @Translation("Taxonomy Term Bundle"),
+ *   context = {
+ *     "taxonomy_term" = @ContextDefinition("entity:taxonomy_term", label = @Translation("Taxonomy"))
+ *   }
+ * )
+ */
+class TaxonomyCondition extends ConditionPluginBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * The entity storage.
+   *
+   * @var \Drupal\Core\Entity\EntityStorageInterface
+   */
+  protected $entityStorage;
+
+  /**
+   * Creates a new NodeType instance.
+   *
+   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   *   The entity storage.
+   * @param array $configuration
+   *   The plugin configuration, i.e. an array with configuration values keyed
+   *   by configuration option name. The special key 'context' may be used to
+   *   initialize the defined contexts by setting it to an array of context
+   *   values keyed by context names.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   */
+  public function __construct(EntityStorageInterface $entity_storage, array $configuration, $plugin_id, $plugin_definition) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->entityStorage = $entity_storage;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $container->get('entity.manager')->getStorage('taxonomy_term'),
+      $configuration,
+      $plugin_id,
+      $plugin_definition
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $options = [];
+    $terms = $this->entityStorage->loadMultiple();
+    if (is_array($terms) && count($terms) > 0) {
+      foreach ($terms as $type) {
+        $options[$type->id()] = $type->label();
+      }
+      $form['bundles'] = [
+        '#title' => $this->t('Taxonomy term'),
+        '#type' => 'checkboxes',
+        '#options' => $options,
+        '#default_value' => $this->configuration['bundles']?: [],
+      ];
+      return parent::buildConfigurationForm($form, $form_state);
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+   if (is_array($form_state->getValue('bundles')) && count($form_state->getValue('bundles')) > 0) {
+     $this->configuration['bundles'] = array_filter($form_state->getValue('bundles'));
+     parent::submitConfigurationForm($form, $form_state);
+    }
+  }
+
+
+  /**
+   * {@inheritdoc}
+   */
+  public function summary() {
+    //
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function evaluate() {
+    if (!$this->isNegated() && $this->getContextValue('taxonomy_term')->getEntityTypeId() == 'taxonomy_term') {
+      return TRUE;
+    }
+  }
+}
diff --git a/core/modules/taxonomy/taxonomy.services.yml b/core/modules/taxonomy/taxonomy.services.yml
index a8153ed..64421e0 100644
--- a/core/modules/taxonomy/taxonomy.services.yml
+++ b/core/modules/taxonomy/taxonomy.services.yml
@@ -4,3 +4,8 @@ services:
     arguments: ['@entity.manager']
     tags:
       - { name: breadcrumb_builder, priority: 1002 }
+  taxonomy.taxonomy_route_context:
+    class: Drupal\taxonomy\ContextProvider\TaxonomyRouteContext
+    arguments: ['@current_route_match']
+    tags:
+      - { name: 'context_provider' }
